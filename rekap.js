//
const TelegramBot = require('node-telegram-bot-api');
const Tesseract = require('tesseract.js');
const fs = require('fs');
const path = require('path');
const https = require('https');
const sharp = require('sharp');

// Konfigurasi Bot
const BOT_TOKEN = '7782738957:AAE1hBtX3eIEop26IU07X_YSSaK-ki2RgNA';
const ADMIN_IDS = [5988451717, 1285724437];

// Inisialisasi bot
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// Storage untuk menyimpan data user
const userSessions = new Map();

// Konfigurasi OCR untuk SEMUA bahasa dengan akurasi maksimal
const OCR_CONFIG = {
    // Semua bahasa yang didukung Tesseract
    lang: 'afr+amh+ara+asm+aze+aze_cyrl+bel+ben+bod+bos+bre+bul+cat+ceb+ces+chi_sim+chi_sim_vert+chi_tra+chi_tra_vert+chr+cos+cym+dan+deu+div+dzo+ell+eng+enm+epo+est+eus+fao+fas+fil+fin+fra+frk+frm+fry+gla+gle+glg+grc+guj+hat+heb+hin+hrv+hun+hye+iku+ind+isl+ita+ita_old+jav+jpn+jpn_vert+kan+kat+kat_old+kaz+khm+kir+kmr+kor+kor_vert+lao+lat+lav+lit+ltz+mal+mar+mkd+mlt+mon+mri+msa+mya+nep+nld+nor+oci+ori+pan+pol+por+pus+que+ron+rus+san+sin+slk+slv+snd+spa+spa_old+sqi+srp+srp_latn+sun+swa+swe+syr+tam+tat+tel+tgk+tha+tir+ton+tur+uig+ukr+urd+uzb+uzb_cyrl+vie+yid+yor',
    
    // Konfigurasi optimal untuk akurasi maksimal
    tessedit_pageseg_mode: Tesseract.PSM.AUTO,
    tessedit_ocr_engine_mode: Tesseract.OEM.LSTM_ONLY,
    tessedit_char_whitelist: '',
    preserve_interword_spaces: '1',
    user_defined_dpi: '300',
    tessedit_do_invert: '0',
    tessedit_write_images: '0',
    logger: m => {} // Silent mode untuk performa
};

// Struktur data session user
class UserSession {
    constructor(userId) {
        this.userId = userId;
        this.groups = []; // Array untuk menyimpan grup berurutan
        this.isProcessing = false;
        this.lastPhotoTime = null;
        this.processingMessageId = null;
        this.timer = null;
        this.photoQueue = [];
        this.photoCounter = 0; // Counter untuk urutan foto
    }

    addGroup(name, members) {
        this.photoCounter++;
        this.groups.push({ 
            order: this.photoCounter,
            name: name,
            members: members,
            timestamp: Date.now()
        });
    }

    getTotalMembers() {
        return this.groups.reduce((sum, group) => sum + group.members, 0);
    }

    getMembersCalculation() {
        const memberCounts = this.groups.map(g => g.members);
        return `${memberCounts.join(' + ')} = ${this.getTotalMembers()}`;
    }

    getFormattedResults() {
        if (this.groups.length === 0) return 'Belum ada grup terdeteksi';
        
        let result = '';
        this.groups.forEach((group, index) => {
            result += `**${index + 1}.**\n`;
            result += `Nama Grup: ${group.name}\n`;
            result += `Anggota: ${group.members}\n\n`;
        });
        
        result += `üßÆ **TOTAL ANGGOTA:**\n${this.getMembersCalculation()}`;
        return result;
    }

    reset() {
        this.groups = [];
        this.isProcessing = false;
        this.lastPhotoTime = null;
        this.processingMessageId = null;
        this.photoQueue = [];
        this.photoCounter = 0;
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
    }
}

// Fungsi preprocessing gambar untuk OCR optimal
async function optimizeImageForOCR(inputPath) {
    try {
        const outputPath = inputPath.replace('.jpg', '_optimized.jpg');
        
        // Preprocessing untuk akurasi OCR maksimal
        await sharp(inputPath)
            .resize(2400, null, { 
                withoutEnlargement: false,
                fit: 'inside',
                kernel: sharp.kernel.lanczos3
            })
            .normalize() // Auto-adjust kontras
            .sharpen({ sigma: 1.2, flat: 1, jagged: 2 }) // Sharpen text
            .gamma(1.2) // Brightening gamma
            .modulate({
                brightness: 1.15, // Sedikit lebih terang
                saturation: 0.7   // Kurangi saturasi untuk focus teks
            })
            .jpeg({ quality: 98, progressive: false }) // Kualitas maksimal
            .toFile(outputPath);
        
        return outputPath;
    } catch (error) {
        console.error('Image optimization error:', error);
        return inputPath; // Return original jika gagal
    }
}

// Fungsi OCR dengan konfigurasi maksimal
async function performOptimalOCR(imagePath) {
    try {
        console.log('üñºÔ∏è Optimizing image for OCR...');
        const optimizedPath = await optimizeImageForOCR(imagePath);
        
        console.log('üîç Starting OCR with full language support...');
        console.log('üìù Languages:', OCR_CONFIG.lang.split('+').length, 'languages loaded');
        
        const { data: { text, confidence } } = await Tesseract.recognize(optimizedPath, OCR_CONFIG.lang, OCR_CONFIG);
        
        console.log(`‚úÖ OCR completed with confidence: ${confidence}%`);
        console.log('üìÑ Raw OCR output:');
        console.log('=' .repeat(50));
        console.log(text);
        console.log('=' .repeat(50));
        
        // Cleanup optimized file
        if (fs.existsSync(optimizedPath) && optimizedPath !== imagePath) {
            fs.unlinkSync(optimizedPath);
        }
        
        return text;
    } catch (error) {
        console.error('‚ùå OCR Error:', error.message);
        throw new Error(`OCR failed: ${error.message}`);
    }
}

// Fungsi parsing ultra-akurat untuk format WhatsApp
function parseWhatsAppData(ocrText) {
    console.log('üîç Starting parsing process...');
    
    // Split text menjadi lines dan bersihkan
    const allLines = ocrText.split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0);
    
    console.log('üìù All lines detected:');
    allLines.forEach((line, i) => console.log(`${i + 1}: "${line}"`));
    
    let groupName = null;
    let memberCount = null;
    
    // === STEP 1: DETEKSI JUMLAH ANGGOTA ===
    console.log('\nüîç Step 1: Detecting member count...');
    
    // Pattern comprehensive untuk deteksi anggota dalam SEMUA bahasa
    const memberPatterns = [
        // === BAHASA INDONESIA ===
        /(\d+)\s*anggota/i,
        /anggota\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /grup\s*[:\-‚Ä¢]\s*(\d+)\s*anggota/i,
        /‚Ä¢\s*(\d+)\s*anggota/i,
        
        // === ENGLISH ===
        /(\d+)\s*members?/i,
        /members?\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /group\s*[:\-‚Ä¢]\s*(\d+)\s*members?/i,
        /‚Ä¢\s*(\d+)\s*members?/i,
        
        // === ARABIC - ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ===
        /(\d+)\s*ÿ£ÿπÿ∂ÿßÿ°/i,
        /ÿ£ÿπÿ∂ÿßÿ°\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /ŸÖÿ¨ŸÖŸàÿπÿ©\s*[:\-‚Ä¢]\s*(\d+)\s*ÿ£ÿπÿ∂ÿßÿ°/i,
        /‚Ä¢\s*(\d+)\s*ÿ£ÿπÿ∂ÿßÿ°/i,
        
        // === CHINESE SIMPLIFIED - ÁÆÄ‰Ωì‰∏≠Êñá ===
        /(\d+)\s*ÊàêÂëò/i,
        /ÊàêÂëò\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /Áæ§ÁªÑ\s*[:\-‚Ä¢]\s*(\d+)\s*ÊàêÂëò/i,
        /‚Ä¢\s*(\d+)\s*ÊàêÂëò/i,
        
        // === CHINESE TRADITIONAL - ÁπÅÈ´î‰∏≠Êñá ===
        /(\d+)\s*ÊàêÂì°/i,
        /ÊàêÂì°\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /Áæ§ÁµÑ\s*[:\-‚Ä¢]\s*(\d+)\s*ÊàêÂì°/i,
        /‚Ä¢\s*(\d+)\s*ÊàêÂì°/i,
        
        // === JAPANESE - Êó•Êú¨Ë™û ===
        /(\d+)\s*„É°„É≥„Éê„Éº/i,
        /„É°„É≥„Éê„Éº\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /„Ç∞„É´„Éº„Éó\s*[:\-‚Ä¢]\s*(\d+)\s*„É°„É≥„Éê„Éº/i,
        /‚Ä¢\s*(\d+)\s*„É°„É≥„Éê„Éº/i,
        
        // === KOREAN - ÌïúÍµ≠Ïñ¥ ===
        /(\d+)\s*Íµ¨ÏÑ±Ïõê/i,
        /Íµ¨ÏÑ±Ïõê\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /Í∑∏Î£π\s*[:\-‚Ä¢]\s*(\d+)\s*Íµ¨ÏÑ±Ïõê/i,
        /‚Ä¢\s*(\d+)\s*Íµ¨ÏÑ±Ïõê/i,
        
        // === THAI - ‡πÑ‡∏ó‡∏¢ ===
        /(\d+)\s*‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å/i,
        /‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /‡∏Å‡∏•‡∏∏‡πà‡∏°\s*[:\-‚Ä¢]\s*(\d+)\s*‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å/i,
        /‚Ä¢\s*(\d+)\s*‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å/i,
        
        // === VIETNAMESE - Ti·∫øng Vi·ªát ===
        /(\d+)\s*th√†nh\s*vi√™n/i,
        /th√†nh\s*vi√™n\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /nh√≥m\s*[:\-‚Ä¢]\s*(\d+)\s*th√†nh\s*vi√™n/i,
        /‚Ä¢\s*(\d+)\s*th√†nh\s*vi√™n/i,
        
        // === RUSSIAN - –†—É—Å—Å–∫–∏–π ===
        /(\d+)\s*—É—á–∞—Å—Ç–Ω–∏–∫/i,
        /—É—á–∞—Å—Ç–Ω–∏–∫\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /–≥—Ä—É–ø–ø–∞\s*[:\-‚Ä¢]\s*(\d+)\s*—É—á–∞—Å—Ç–Ω–∏–∫/i,
        /‚Ä¢\s*(\d+)\s*—É—á–∞—Å—Ç–Ω–∏–∫/i,
        
        // === SPANISH - Espa√±ol ===
        /(\d+)\s*miembros?/i,
        /miembros?\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /grupo\s*[:\-‚Ä¢]\s*(\d+)\s*miembros?/i,
        /‚Ä¢\s*(\d+)\s*miembros?/i,
        
        // === FRENCH - Fran√ßais ===
        /(\d+)\s*membres?/i,
        /membres?\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /groupe\s*[:\-‚Ä¢]\s*(\d+)\s*membres?/i,
        /‚Ä¢\s*(\d+)\s*membres?/i,
        
        // === GERMAN - Deutsch ===
        /(\d+)\s*mitglieder/i,
        /mitglieder\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /gruppe\s*[:\-‚Ä¢]\s*(\d+)\s*mitglieder/i,
        /‚Ä¢\s*(\d+)\s*mitglieder/i,
        
        // === PORTUGUESE - Portugu√™s ===
        /(\d+)\s*membros?/i,
        /membros?\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /grupo\s*[:\-‚Ä¢]\s*(\d+)\s*membros?/i,
        /‚Ä¢\s*(\d+)\s*membros?/i,
        
        // === HINDI - ‡§π‡§ø‡§Ç‡§¶‡•Ä ===
        /(\d+)\s*‡§∏‡§¶‡§∏‡•ç‡§Ø/i,
        /‡§∏‡§¶‡§∏‡•ç‡§Ø\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /‡§∏‡§Æ‡•Ç‡§π\s*[:\-‚Ä¢]\s*(\d+)\s*‡§∏‡§¶‡§∏‡•ç‡§Ø/i,
        /‚Ä¢\s*(\d+)\s*‡§∏‡§¶‡§∏‡•ç‡§Ø/i,
        
        // === TURKISH - T√ºrk√ße ===
        /(\d+)\s*√ºye/i,
        /√ºye\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /grup\s*[:\-‚Ä¢]\s*(\d+)\s*√ºye/i,
        /‚Ä¢\s*(\d+)\s*√ºye/i,
        
        // === BENGALI - ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ===
        /(\d+)\s*‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø/i,
        /‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø\s*[:\-‚Ä¢]?\s*(\d+)/i,
        /‡¶ó‡ßç‡¶∞‡ßÅ‡¶™\s*[:\-‚Ä¢]\s*(\d+)\s*‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø/i,
        /‚Ä¢\s*(\d+)\s*‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø/i,
        
        // === ADDITIONAL PATTERNS ===
        // Untuk format yang lebih umum
        /group\s*‚Ä¢\s*(\d+)/i,
        /grup\s*‚Ä¢\s*(\d+)/i,
        /ŸÖÿ¨ŸÖŸàÿπÿ©\s*‚Ä¢\s*(\d+)/i,
        /Áæ§ÁªÑ\s*‚Ä¢\s*(\d+)/i,
        /Áæ§ÁµÑ\s*‚Ä¢\s*(\d+)/i,
        /„Ç∞„É´„Éº„Éó\s*‚Ä¢\s*(\d+)/i,
        /Í∑∏Î£π\s*‚Ä¢\s*(\d+)/i,
        /‡∏Å‡∏•‡∏∏‡πà‡∏°\s*‚Ä¢\s*(\d+)/i,
        /nh√≥m\s*‚Ä¢\s*(\d+)/i,
        /–≥—Ä—É–ø–ø–∞\s*‚Ä¢\s*(\d+)/i,
        /grupo\s*‚Ä¢\s*(\d+)/i,
        /groupe\s*‚Ä¢\s*(\d+)/i,
        /gruppe\s*‚Ä¢\s*(\d+)/i,
        /‡§∏‡§Æ‡•Ç‡§π\s*‚Ä¢\s*(\d+)/i,
        /grup\s*‚Ä¢\s*(\d+)/i
    ];
    
    // Cari member count
    for (const line of allLines) {
        for (let i = 0; i < memberPatterns.length; i++) {
            const pattern = memberPatterns[i];
            const match = line.match(pattern);
            if (match) {
                const count = parseInt(match[1]);
                // Validasi range yang masuk akal untuk grup WhatsApp
                if (count >= 1 && count <= 1000000) {
                    memberCount = count;
                    console.log(`‚úÖ Member count found: ${count} from line: "${line}" using pattern ${i + 1}`);
                    break;
                }
            }
        }
        if (memberCount !== null) break;
    }
    
    // === STEP 2: DETEKSI NAMA GRUP ===
    console.log('\nüîç Step 2: Detecting group name...');
    
    // Kata kunci yang menandakan BUKAN nama grup (info lines)
    const infoKeywords = [
        // Indonesia
        'grup', 'anggota', 'chat', 'audio', 'tambah', 'cari', 'notifikasi', 
        'visibilitas', 'pesan', 'enkripsi', 'dibuat', 'terakhir', 'dilihat', 
        'online', 'ketik', 'info', 'deskripsi', 'media', 'mati',
        
        // English
        'group', 'members', 'member', 'chat', 'audio', 'add', 'search', 
        'notification', 'visibility', 'message', 'encryption', 'created', 
        'last', 'seen', 'online', 'typing', 'info', 'description', 'media', 'mute',
        
        // Arabic
        'ŸÖÿ¨ŸÖŸàÿπÿ©', 'ÿ£ÿπÿ∂ÿßÿ°', 'ÿπÿ∂Ÿà', 'ŸÖÿ≠ÿßÿØÿ´ÿ©', 'ÿµŸàÿ™', 'ÿ•ÿ∂ÿßŸÅÿ©', 'ÿ®ÿ≠ÿ´', 'ÿ•ÿ¥ÿπÿßÿ±', 
        'ÿ±ÿ§Ÿäÿ©', 'ÿ±ÿ≥ÿßŸÑÿ©', 'ÿ™ÿ¥ŸÅŸäÿ±', 'ÿ¢ÿÆÿ±', 'ŸÖÿ™ÿµŸÑ', 'ŸÖÿπŸÑŸàŸÖÿßÿ™',
        
        // Chinese
        'Áæ§ÁªÑ', 'Áæ§ÁµÑ', 'ÊàêÂëò', 'ÊàêÂì°', 'ËÅäÂ§©', 'Èü≥È¢ë', 'Ê∑ªÂä†', 'ÊêúÁ¥¢', 'ÈÄöÁü•', 
        'ÂèØËßÅÊÄß', 'Ê∂àÊÅØ', 'Âä†ÂØÜ', 'ÊúÄÂêé', 'Âú®Á∫ø', '‰ø°ÊÅØ',
        
        // Japanese
        '„Ç∞„É´„Éº„Éó', '„É°„É≥„Éê„Éº', '„ÉÅ„É£„ÉÉ„Éà', '„Ç™„Éº„Éá„Ç£„Ç™', 'ËøΩÂä†', 'Ê§úÁ¥¢', 
        'ÈÄöÁü•', 'Ë°®Á§∫', '„É°„ÉÉ„Çª„Éº„Ç∏', 'ÊöóÂè∑Âåñ', 'ÊúÄÂæå', '„Ç™„É≥„É©„Ç§„É≥', 'ÊÉÖÂ†±',
        
        // Korean
        'Í∑∏Î£π', 'Íµ¨ÏÑ±Ïõê', 'Ï±ÑÌåÖ', 'Ïò§ÎîîÏò§', 'Ï∂îÍ∞Ä', 'Í≤ÄÏÉâ', 'ÏïåÎ¶º', 'ÌëúÏãú', 
        'Î©îÏãúÏßÄ', 'ÏïîÌò∏Ìôî', 'ÎßàÏßÄÎßâ', 'Ïò®ÎùºÏù∏', 'Ï†ïÎ≥¥',
        
        // Thai
        '‡∏Å‡∏•‡∏∏‡πà‡∏°', '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å', '‡πÅ‡∏ä‡∏ó', '‡πÄ‡∏™‡∏µ‡∏¢‡∏á', '‡πÄ‡∏û‡∏¥‡πà‡∏°', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤', '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
        '‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô', '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™', '‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢', '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        
        // Vietnamese
        'nh√≥m', 'th√†nh vi√™n', 'tr√≤ chuy·ªán', '√¢m thanh', 'th√™m', 't√¨m ki·∫øm', 
        'th√¥ng b√°o', 'hi·ªÉn th·ªã', 'tin nh·∫Øn', 'm√£ h√≥a', 'cu·ªëi c√πng', 'tr·ª±c tuy·∫øn', 'th√¥ng tin',
        
        // Russian
        '–≥—Ä—É–ø–ø–∞', '—É—á–∞—Å—Ç–Ω–∏–∫', '—á–∞—Ç', '–∞—É–¥–∏–æ', '–¥–æ–±–∞–≤–∏—Ç—å', '–ø–æ–∏—Å–∫', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 
        '–≤–∏–¥–∏–º–æ—Å—Ç—å', '—Å–æ–æ–±—â–µ–Ω–∏–µ', '—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ', '–ø–æ—Å–ª–µ–¥–Ω–∏–π', '–æ–Ω–ª–∞–π–Ω', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
    ];
    
    // Algoritma untuk mencari nama grup
    const groupNameCandidates = [];
    
    for (let i = 0; i < allLines.length; i++) {
        const line = allLines[i];
        
        // Skip lines kosong atau terlalu pendek
        if (line.length < 1) continue;
        
        // Skip lines yang mengandung info keywords
        const hasInfoKeyword = infoKeywords.some(keyword => 
            line.toLowerCase().includes(keyword.toLowerCase())
        );
        if (hasInfoKeyword) {
            console.log(`‚è≠Ô∏è Skipped info line: "${line}"`);
            continue;
        }
        
        // Skip lines yang mengandung member patterns
        const hasMemberPattern = memberPatterns.some(pattern => pattern.test(line));
        if (hasMemberPattern) {
            console.log(`‚è≠Ô∏è Skipped member line: "${line}"`);
            continue;
        }
        
        // Skip UI symbols dan navigation
        if (/[‚Üê‚Üí‚Üì‚Üë‚¨Ö‚û°‚¨á‚¨Üüì±üí¨üîç‚öôÔ∏èüìûüé•üîäüë•]/.test(line)) {
            console.log(`‚è≠Ô∏è Skipped UI line: "${line}"`);
            continue;
        }
        
        // Skip nomor telepon
        if (/^\+?\d{8,15}$/.test(line.replace(/[\s\-()]/g, ''))) {
            console.log(`‚è≠Ô∏è Skipped phone number: "${line}"`);
            continue;
        }
        
        // Skip tanggal/waktu
        if (/\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}/.test(line) || /\d{1,2}:\d{2}/.test(line)) {
            console.log(`‚è≠Ô∏è Skipped date/time: "${line}"`);
            continue;
        }
        
        // Hitung score untuk kandidat nama grup
        let score = 0;
        
        // Prioritas TINGGI untuk posisi atas (nama grup biasanya paling atas di screenshot)
        if (i === 0) score += 50;
        if (i === 1) score += 40;
        if (i === 2) score += 30;
        if (i <= 4) score += 20;
        
        // Prioritas untuk panjang yang wajar
        if (line.length >= 1 && line.length <= 50) score += 15;
        if (line.length >= 2 && line.length <= 30) score += 10;
        
        // Prioritas untuk format yang sering digunakan sebagai nama grup
        if (/^\d+$/.test(line)) score += 25; // Angka murni seperti "292"
        if (/^[A-Za-z0-9\s\u0080-\uFFFF\-_.()]+$/.test(line)) score += 20; // Alphanumeric + unicode + simbol umum
        if (/^[A-Za-z]/.test(line)) score += 10; // Dimulai dengan huruf
        if (/[\u0080-\uFFFF]/.test(line)) score += 15; // Mengandung unicode (emoji, aksara non-latin)
        
        // Penalti untuk hal yang tidak wajar untuk nama grup
        if (line.length > 50) score -= 15;
        if (/[.,:;!?]{2,}/.test(line)) score -= 10; // Banyak punctuation
        if (/^\s*$/.test(line)) score -= 50; // Hanya whitespace
        
        groupNameCandidates.push({ 
            line: line.trim(), 
            score: score, 
            index: i 
        });
        
        console.log(`üìù Candidate "${line}" ‚Üí Score: ${score} (index: ${i})`);
    }
    
    // Urutkan kandidat berdasarkan score tertinggi
    groupNameCandidates.sort((a, b) => b.score - a.score);
    
    if (groupNameCandidates.length > 0) {
        groupName = groupNameCandidates[0].line;
        console.log(`üéØ SELECTED GROUP NAME: "${groupName}" (score: ${groupNameCandidates[0].score})`);
        console.log('üèÜ Top 3 candidates:');
        groupNameCandidates.slice(0, 3).forEach((c, i) => {
            console.log(`   ${i + 1}. "${c.line}" (score: ${c.score})`);
        });
    }
    
    // === FALLBACK untuk member count ===
    if (memberCount === null) {
        console.log('\nüîÑ Fallback: Looking for reasonable numbers...');
        const allNumbers = [];
        
        for (const line of allLines) {
            const numbers = line.match(/\d+/g);
            if (numbers) {
                numbers.forEach(numStr => {
                    const num = parseInt(numStr);
                    if (num >= 2 && num <= 100000) { // Range wajar untuk grup
                        allNumbers.push(num);
                        console.log(`   Found number: ${num} in line: "${line}"`);
                    }
                });
            }
        }
        
        if (allNumbers.length > 0) {
            // Pilih angka yang paling mungkin jumlah anggota
            // Biasanya bukan angka pertama (yang mungkin nama grup)
            memberCount = allNumbers.length > 1 ? allNumbers[1] : allNumbers[0];
            console.log(`üîÑ Fallback member count selected: ${memberCount}`);
        }
    }
    
    // === FALLBACK untuk group name ===
    if (!groupName && allLines.length > 0) {
        console.log('\nüîÑ Fallback: Using first non-empty line as group name...');
        for (const line of allLines) {
            if (line.trim().length > 0) {
                groupName = line.trim();
                console.log(`üîÑ Fallback group name: "${groupName}"`);
                break;
            }
        }
    }
    
    const result = {
        groupName: groupName || 'Unknown Group',
        memberCount: memberCount || 0,
        success: groupName !== null && memberCount !== null
    };
    
    console.log('\nüéØ === FINAL PARSING RESULT ===');
    console.log(`   Group Name: "${result.groupName}"`);
    console.log(`   Member Count: ${result.memberCount}`);
    console.log(`   Success: ${result.success}`);
    console.log('================================\n');
    
    return result;
}

// Fungsi download foto
async function downloadPhoto(fileId) {
    try {
        const file = await bot.getFile(fileId);
        const filePath = file.file_path;
        const url = `https://api.telegram.org/file/bot${BOT_TOKEN}/${filePath}`;
        
        const localPath = path.join(__dirname, 'temp', `${fileId}.jpg`);
        
        if (!fs.existsSync(path.join(__dirname, 'temp'))) {
            fs.mkdirSync(path.join(__dirname, 'temp'), { recursive: true });
        }

        return new Promise((resolve, reject) => {
            const file = fs.createWriteStream(localPath);
            https.get(url, (response) => {
                response.pipe(file);
                file.on('finish', () => {
                    file.close();
                    resolve(localPath);
                });
            }).on('error', reject);
        });
    } catch (error) {
        throw new Error(`Error downloading photo: ${error.message}`);
    }
}

// Fungsi untuk membuat keyboard
function createKeyboard(hasResults = false) {
    if (hasResults) {
        return {
            inline_keyboard: [
                [{ text: '‚úÖ Selesai & Lihat Total Final', callback_data: 'finish' }],
                [{ text: 'üîÑ Reset Semua Data', callback_data: 'reset' }]
            ]
        };
    }
    return null;
}

// Fungsi update pesan dengan hasil incremental
async function updateIncrementalResults(chatId, messageId, groups, isProcessing = false) {
    let text = `ü§ñ **BOT REKAP GRUP - HASIL REAL TIME**\n\n`;
    
    if (isProcessing) {
        text += `‚è≥ **Sedang memproses foto...**\n\n`;
    } else {
        text += `‚úÖ **Siap menerima foto berikutnya**\n\n`;
    }
    
    if (groups.length > 0) {
        text += `üìä **HASIL TERKINI (${groups.length} grup):**\n\n`;
        
        // Tampilkan setiap grup dengan format yang diminta
        groups.forEach((group, index) => {
            text += `**${index + 1}.**\n`;
            text += `Nama Grup: ${group.name}\n`;
            text += `Anggota: ${group.members}\n\n`;
        });
        
        // Tampilkan total perhitungan
        const memberCounts = groups.map(g => g.members);
        const total = groups.reduce((sum, g) => sum + g.members, 0);
        text += `üßÆ **TOTAL SEMENTARA:**\n${memberCounts.join(' + ')} = ${total}\n\n`;
        text += `üí° Kirim foto lagi untuk menambah atau klik Selesai`;
    } else {
        text += `üìä **Belum ada grup terdeteksi**\n\nüí° Kirim foto screenshot grup WhatsApp`;
    }
    
    try {
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: createKeyboard(groups.length > 0)
        });
    } catch (error) {
        console.error('Error updating message:', error.message);
    }
}

// Fungsi proses foto batch
async function processBatchPhotos(userId, chatId) {
    const session = userSessions.get(userId);
    if (!session || session.isProcessing || session.photoQueue.length === 0) return;

    console.log(`üöÄ Processing ${session.photoQueue.length} photos for user ${userId}`);
    session.isProcessing = true;
    
    // Kirim atau update pesan processing
    if (!session.processingMessageId) {
        const processingMsg = await bot.sendMessage(chatId, 
            'ü§ñ **BOT REKAP GRUP - HASIL REAL TIME**\n\n‚è≥ **Sedang memproses foto...**\n\nüìä **Belum ada grup terdeteksi**\n\nüí° Kirim foto screenshot grup WhatsApp', 
            {
                parse_mode: 'Markdown'
            }
        );
        session.processingMessageId = processingMsg.message_id;
    }
    
    await updateIncrementalResults(chatId, session.processingMessageId, session.groups, true);
    
    // Proses setiap foto di queue secara berurutan (FIFO)
    const currentQueue = [...session.photoQueue];
    session.photoQueue = []; // Clear queue
    
    for (const photoData of currentQueue) {
        try {
            console.log(`üì∏ Processing photo order ${photoData.order}: ${photoData.fileId}`);
            
            // Download foto
            const imagePath = await downloadPhoto(photoData.fileId);
            
            // Perform OCR
            const extractedText = await performOptimalOCR(imagePath);
            
            // Parse hasil OCR
            const groupInfo = parseWhatsAppData(extractedText);
            
            if (groupInfo.success && groupInfo.memberCount > 0) {
                // Tambah ke session (akan increment counter otomatis)
                session.addGroup(groupInfo.groupName, groupInfo.memberCount);
                
                console.log(`‚úÖ Added group ${session.groups.length}: "${groupInfo.groupName}" - ${groupInfo.memberCount} members`);
                
                // Update hasil secara incremental (TIDAK RESET)
                await updateIncrementalResults(chatId, session.processingMessageId, session.groups, true);
            } else {
                console.log(`‚ö†Ô∏è Failed to extract valid data from photo order ${photoData.order}`);
            }

            // Cleanup file
            if (fs.existsSync(imagePath)) {
                fs.unlinkSync(imagePath);
            }

            // Delete user's photo message untuk mengurangi spam
            try {
                await bot.deleteMessage(chatId, photoData.messageId);
            } catch (error) {
                console.error('Error deleting photo message:', error.message);
            }
            
        } catch (error) {
            console.error(`‚ùå Error processing photo order ${photoData.order}:`, error.message);
        }
    }
    
    // Update final status
    await updateIncrementalResults(chatId, session.processingMessageId, session.groups, false);
    session.isProcessing = false;
    
    console.log(`‚úÖ Batch processing complete. Total groups detected: ${session.groups.length}`);
}

// Handler untuk foto
bot.on('photo', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    console.log(`üì∏ Photo received from user ${userId}`);
    
    // Cek admin
    if (!ADMIN_IDS.includes(userId)) {
        await bot.sendMessage(chatId, '‚ùå Maaf, hanya admin yang dapat menggunakan bot ini.');
        return;
    }

    // Inisialisasi session jika belum ada
    if (!userSessions.has(userId)) {
        userSessions.set(userId, new UserSession(userId));
    }

    const session = userSessions.get(userId);
    session.lastPhotoTime = Date.now();

    // Tambah foto ke queue dengan urutan berdasarkan waktu diterima
    const photoId = msg.photo[msg.photo.length - 1].file_id;
    const photoOrder = session.photoQueue.length + 1;
    
    session.photoQueue.push({
        fileId: photoId,
        messageId: msg.message_id,
        order: photoOrder,
        timestamp: Date.now()
    });

    console.log(`üì• Photo queued as order ${photoOrder}. Total in queue: ${session.photoQueue.length}`);

    // Clear timer sebelumnya dan set timer baru
    if (session.timer) {
        clearTimeout(session.timer);
    }

    // Set timer 10 detik untuk batch processing
    session.timer = setTimeout(async () => {
        await processBatchPhotos(userId, chatId);
    }, 10000);

    console.log(`‚è∞ Timer set for 10 seconds. Current queue size: ${session.photoQueue.length}`);
});

// Handler untuk callback query
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    if (!ADMIN_IDS.includes(userId)) {
        await bot.answerCallbackQuery(query.id, { text: 'Hanya admin yang dapat menggunakan bot ini.' });
        return;
    }

    const session = userSessions.get(userId);

    switch (data) {
        case 'finish':
            if (session && session.groups.length > 0) {
                const finalText = `üéâ **REKAP GRUP SELESAI!**\n\n${session.getFormattedResults()}`;
                
                await bot.editMessageText(finalText, {
                    chat_id: chatId,
                    message_id: query.message.message_id,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîÑ Mulai Rekap Baru', callback_data: 'reset' }]
                        ]
                    }
                });
            } else {
                await bot.answerCallbackQuery(query.id, { text: 'Belum ada grup yang terdeteksi!' });
            }
            break;

        case 'reset':
            if (session) {
                session.reset();
            }
            await bot.editMessageText('üîÑ **Data direset!**\n\nKirim foto grup untuk memulai rekap baru.', {
                chat_id: chatId,
                message_id: query.message.message_id,
                parse_mode: 'Markdown'
            });
            break;
    }

    await bot.answerCallbackQuery(query.id);
});

// Command handlers
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!ADMIN_IDS.includes(userId)) {
        await bot.sendMessage(chatId, '‚ùå Maaf, hanya admin yang dapat menggunakan bot ini.');
        return;
    }

    const welcomeText = `ü§ñ **ULTIMATE OCR BOT - DETEKSI MAKSIMAL**

üéØ **Fitur Unggulan:**
‚Ä¢ OCR Tesseract dengan 150+ bahasa
‚Ä¢ Algoritma parsing ultra-akurat
‚Ä¢ Deteksi nama grup apa saja (angka/teks/emoji)
‚Ä¢ Support semua bahasa dunia
‚Ä¢ Hasil berurutan sesuai foto dikirim
‚Ä¢ Incremental results (tidak reset)

üìã **Format Output:**
**1.**
Nama Grup: [sesuai asli dari foto]
Anggota: [jumlah terdeteksi]

**2.**
Nama Grup: [grup kedua]
Anggota: [jumlah anggota]

üßÆ Total: [perhitungan otomatis]

üöÄ **Cara Pakai:**
1. Kirim foto screenshot grup WhatsApp
2. Bot tunggu 10 detik untuk foto tambahan  
3. Hasil langsung muncul dan terus bertambah
4. Klik "Selesai" untuk hasil final

üí° Kirim foto pertama untuk memulai!`;

    await bot.sendMessage(chatId, welcomeText, { parse_mode: 'Markdown' });
});

bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!ADMIN_IDS.includes(userId)) {
        await bot.sendMessage(chatId, '‚ùå Maaf, hanya admin yang dapat menggunakan bot ini.');
        return;
    }

    const session = userSessions.get(userId);
    
    if (session && session.groups.length > 0) {
        const statusText = `üìä **STATUS REKAP SAAT INI**

üîÑ Status: ${session.isProcessing ? 'Sedang memproses' : 'Standby'}
üìà Total grup: ${session.groups.length}
üë• Total anggota: ${session.getTotalMembers()}
üì∏ Foto antrian: ${session.photoQueue.length}

**HASIL TERKINI:**
${session.getFormattedResults()}`;

        await bot.sendMessage(chatId, statusText, { parse_mode: 'Markdown' });
    } else {
        await bot.sendMessage(chatId, 'üìä **STATUS:** Belum ada rekap aktif.\n\nKirim foto grup untuk memulai!', { parse_mode: 'Markdown' });
    }
});

bot.onText(/\/reset/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!ADMIN_IDS.includes(userId)) {
        await bot.sendMessage(chatId, '‚ùå Maaf, hanya admin yang dapat menggunakan bot ini.');
        return;
    }

    const session = userSessions.get(userId);
    if (session) {
        session.reset();
        await bot.sendMessage(chatId, 'üîÑ **Data berhasil direset!**\n\nKirim foto grup untuk memulai rekap baru.', { parse_mode: 'Markdown' });
    } else {
        await bot.sendMessage(chatId, 'üìä Tidak ada data untuk direset.', { parse_mode: 'Markdown' });
    }
});

// Error handlers
bot.on('polling_error', (error) => {
    console.error('‚ùå Polling error:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection:', reason);
});

process.on('SIGINT', () => {
    console.log('üõë Bot shutting down gracefully...');
    bot.stopPolling();
    process.exit(0);
});

// Startup messages
console.log('üöÄ ULTIMATE OCR BOT STARTED SUCCESSFULLY!');
console.log('üåç Language Support: 150+ languages loaded');
console.log('üéØ Algorithm: Ultra-accurate WhatsApp detection');
console.log('üë• Authorized Admins:', ADMIN_IDS);
console.log('üì± Ready to process group screenshots with maximum accuracy!');
console.log('=====================================');
